{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nexport default {\n  name: 'ChatWithAI',\n  data() {\n    return {\n      messages: [],\n      userInput: '',\n      imageFile: null,\n      sending: false\n    };\n  },\n  methods: {\n    handleImageChange(e) {\n      this.imageFile = e.target.files[0] || null;\n    },\n    async sendMessage() {\n      if (!this.imageFile && !this.userInput.trim()) {\n        alert('请上传图片或输入文字');\n        return;\n      }\n      this.sending = true;\n      const newMessage = {\n        role: 'user',\n        content: []\n      };\n\n      // 加入文本\n      if (this.userInput.trim()) {\n        newMessage.content.push({\n          type: 'text',\n          text: this.userInput.trim()\n        });\n      }\n\n      // 加入图片（以 base64 格式）\n      if (this.imageFile) {\n        const base64 = await this.readFileAsBase64(this.imageFile);\n        const mimeType = this.imageFile.type;\n        newMessage.content.push({\n          type: 'image_url',\n          image_url: {\n            url: `data:${mimeType};base64,${base64}`\n          }\n        });\n      }\n      this.messages.push(newMessage);\n      try {\n        const res = await fetch('/api/chat', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            messages: this.messages\n          })\n        });\n        const data = await res.json();\n        if (data.success) {\n          this.messages = data.messages;\n        } else {\n          this.messages.push({\n            role: 'assistant',\n            content: [{\n              type: 'text',\n              text: '识别失败：' + data.error\n            }]\n          });\n        }\n      } catch (err) {\n        this.messages.push({\n          role: 'assistant',\n          content: [{\n            type: 'text',\n            text: '网络错误：' + err.message\n          }]\n        });\n      } finally {\n        this.userInput = '';\n        this.imageFile = null;\n        this.sending = false;\n      }\n    },\n    readFileAsBase64(file) {\n      return new Promise((resolve, reject) => {\n        const reader = new FileReader();\n        reader.onload = e => {\n          const base64 = e.target.result.split(',')[1];\n          resolve(base64);\n        };\n        reader.onerror = reject;\n        reader.readAsDataURL(file);\n      });\n    }\n  }\n};","map":{"version":3,"names":["name","data","messages","userInput","imageFile","sending","methods","handleImageChange","e","target","files","sendMessage","trim","alert","newMessage","role","content","push","type","text","base64","readFileAsBase64","mimeType","image_url","url","res","fetch","method","headers","body","JSON","stringify","json","success","error","err","message","file","Promise","resolve","reject","reader","FileReader","onload","result","split","onerror","readAsDataURL"],"sources":["D:\\web\\qianrushi\\my-first-vue-app\\src\\views\\ChatWithAI.vue"],"sourcesContent":["<template>\r\n  <div class=\"chat-page\">\r\n    <div class=\"chat-box\">\r\n      <h2>💬 AI 图文识别系统</h2>\r\n      <div class=\"chat-history\">\r\n        <div v-for=\"(msg, index) in messages\" :key=\"index\" :class=\"['msg', msg.role]\">\r\n          <p><strong>{{ msg.role === 'user' ? '我：' : 'AI：' }}</strong></p>\r\n\r\n          <template v-if=\"msg.role === 'user'\">\r\n            <p v-for=\"(item, i) in msg.content\" :key=\"i\" v-if=\"item.type === 'text'\">{{ item.text }}</p>\r\n            <img v-for=\"(item, i) in msg.content\" :key=\"'img-' + i\" v-if=\"item.type === 'image_url'\" :src=\"item.image_url.url\" class=\"chat-image\" />\r\n          </template>\r\n\r\n          <template v-else>\r\n            <div v-if=\"typeof msg.content === 'object' && msg.content.analysis\">\r\n              <p class=\"analysis-text\">分析结果: {{ msg.content.analysis }}</p>\r\n              <p class=\"coordinates-text\">\r\n                <span class=\"coord-label\">异常坐标：</span>\r\n                <span class=\"coord-values\">\r\n                  ({{ msg.content.coordinates.x1 }}, {{ msg.content.coordinates.y1 }}) 至\r\n                  ({{ msg.content.coordinates.x2 }}, {{ msg.content.coordinates.y2 }})\r\n                </span>\r\n              </p>\r\n              <div class=\"image-container\">\r\n                <img v-if=\"msg.content.original_image\" :src=\"msg.content.original_image\" alt=\"原图\" class=\"chat-image\" />\r\n                <img v-if=\"msg.content.annotated_image\" :src=\"msg.content.annotated_image\" alt=\"标注图\" class=\"chat-image marked\" />\r\n              </div>\r\n            </div>\r\n            <p v-else>\r\n              <span v-for=\"(item, i) in msg.content\" :key=\"i\" v-if=\"item.type === 'text'\">{{ item.text }}</span>\r\n            </p>\r\n          </template>\r\n        </div>\r\n      </div>\r\n\r\n      <div class=\"chat-inputs\">\r\n        <input type=\"text\" v-model=\"userInput\" @keyup.enter=\"sendMessage\" placeholder=\"输入内容（非必须）\" class=\"chat-input\" />\r\n        <input type=\"file\" accept=\"image/*\" @change=\"handleImageChange\" class=\"file-input\" />\r\n        <button @click=\"sendMessage\" class=\"send-btn\" :disabled=\"sending\">{{ sending ? '发送中...' : '发送' }}</button>\r\n      </div>\r\n    </div>\r\n    <div class=\"background-decor\"></div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  name: 'ChatWithAI',\r\n  data() {\r\n    return {\r\n      messages: [],\r\n      userInput: '',\r\n      imageFile: null,\r\n      sending: false\r\n    };\r\n  },\r\n  methods: {\r\n    handleImageChange(e) {\r\n      this.imageFile = e.target.files[0] || null;\r\n    },\r\n    async sendMessage() {\r\n      if (!this.imageFile && !this.userInput.trim()) {\r\n        alert('请上传图片或输入文字');\r\n        return;\r\n      }\r\n\r\n      this.sending = true;\r\n\r\n      const newMessage = {\r\n        role: 'user',\r\n        content: []\r\n      };\r\n\r\n      // 加入文本\r\n      if (this.userInput.trim()) {\r\n        newMessage.content.push({ type: 'text', text: this.userInput.trim() });\r\n      }\r\n\r\n      // 加入图片（以 base64 格式）\r\n      if (this.imageFile) {\r\n        const base64 = await this.readFileAsBase64(this.imageFile);\r\n        const mimeType = this.imageFile.type;\r\n        newMessage.content.push({\r\n          type: 'image_url',\r\n          image_url: { url: `data:${mimeType};base64,${base64}` }\r\n        });\r\n      }\r\n\r\n      this.messages.push(newMessage);\r\n\r\n      try {\r\n        const res = await fetch('/api/chat', {\r\n          method: 'POST',\r\n          headers: { 'Content-Type': 'application/json' },\r\n          body: JSON.stringify({ messages: this.messages })\r\n        });\r\n        const data = await res.json();\r\n\r\n        if (data.success) {\r\n          this.messages = data.messages;\r\n        } else {\r\n          this.messages.push({\r\n            role: 'assistant',\r\n            content: [{ type: 'text', text: '识别失败：' + data.error }]\r\n          });\r\n        }\r\n      } catch (err) {\r\n        this.messages.push({\r\n          role: 'assistant',\r\n          content: [{ type: 'text', text: '网络错误：' + err.message }]\r\n        });\r\n      } finally {\r\n        this.userInput = '';\r\n        this.imageFile = null;\r\n        this.sending = false;\r\n      }\r\n    },\r\n    readFileAsBase64(file) {\r\n      return new Promise((resolve, reject) => {\r\n        const reader = new FileReader();\r\n        reader.onload = e => {\r\n          const base64 = e.target.result.split(',')[1];\r\n          resolve(base64);\r\n        };\r\n        reader.onerror = reject;\r\n        reader.readAsDataURL(file);\r\n      });\r\n    }\r\n  }\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.chat-page {\r\n  position: absolute;\r\n  top: 60px;\r\n  left: 0;\r\n  right: 0;\r\n  bottom: 0;\r\n  background: linear-gradient(to right, #1c1c1c, #2a2a2a);\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  padding: 40px 20px;\r\n  overflow: auto;\r\n  box-sizing: border-box;\r\n}\r\n\r\n.chat-box {\r\n  background: rgba(0, 0, 0, 0.3);\r\n  border: 1px solid #00eaff55;\r\n  border-radius: 12px;\r\n  box-shadow: 0 0 20px rgba(0, 234, 255, 0.1);\r\n  padding: 30px;\r\n  max-width: 700px;\r\n  width: 100%;\r\n}\r\n\r\n.chat-box h2 {\r\n  font-size: 24px;\r\n  color: #00eaff;\r\n  margin-bottom: 20px;\r\n}\r\n\r\n.chat-history {\r\n  max-height: 400px;\r\n  overflow-y: auto;\r\n  padding-right: 8px;\r\n  margin-bottom: 20px;\r\n}\r\n\r\n.msg {\r\n  margin-bottom: 16px;\r\n  color: #e0f7ff;\r\n}\r\n\r\n.msg.user {\r\n  text-align: right;\r\n  color: #bbdefb;\r\n}\r\n\r\n.msg.assistant {\r\n  text-align: left;\r\n  color: #c8e6c9;\r\n}\r\n\r\n.chat-image {\r\n  max-width: 200px;\r\n  margin-top: 10px;\r\n  border-radius: 8px;\r\n  display: block;\r\n}\r\n\r\n.chat-inputs {\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n  gap: 10px;\r\n  margin-top: 10px;\r\n}\r\n\r\n.chat-input {\r\n  flex: 1;\r\n  padding: 10px;\r\n  border: 1px solid #00eaff55;\r\n  border-radius: 8px;\r\n  background: #222;\r\n  color: #fff;\r\n  outline: none;\r\n}\r\n\r\n.file-input {\r\n  color: #fff;\r\n}\r\n\r\n.send-btn {\r\n  padding: 10px 20px;\r\n  background: #00eaff;\r\n  border: none;\r\n  border-radius: 8px;\r\n  color: #000;\r\n  font-weight: bold;\r\n  cursor: pointer;\r\n  transition: background 0.3s;\r\n}\r\n.send-btn:hover {\r\n  background: #00bcd4;\r\n}\r\n\r\n.background-decor {\r\n  position: absolute;\r\n  bottom: -100px;\r\n  left: -150px;\r\n  width: 400px;\r\n  height: 400px;\r\n  background: radial-gradient(circle at center, rgba(0, 234, 255, 0.2), transparent);\r\n  filter: blur(120px);\r\n  pointer-events: none;\r\n}\r\n</style>\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}