{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { createElementVNode as _createElementVNode, createCommentVNode as _createCommentVNode, openBlock as _openBlock, createElementBlock as _createElementBlock, toDisplayString as _toDisplayString, createTextVNode as _createTextVNode } from \"vue\";\nconst _hoisted_1 = {\n  class: \"detection-container\"\n};\nconst _hoisted_2 = {\n  class: \"main-content\"\n};\nconst _hoisted_3 = {\n  class: \"image-section\"\n};\nconst _hoisted_4 = [\"src\"];\nconst _hoisted_5 = {\n  class: \"result-section\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_cache[7] || (_cache[7] = _createElementVNode(\"header\", {\n    class: \"top-bar\"\n  }, [_createElementVNode(\"h1\", null, \"工业异常检测平台\")], -1 /* HOISTED */)), _createElementVNode(\"main\", _hoisted_2, [_createCommentVNode(\" 左侧图像展示区域 \"), _createElementVNode(\"section\", _hoisted_3, [$data.latestResult.image_url ? (_openBlock(), _createElementBlock(\"img\", {\n    key: 0,\n    src: $data.latestResult.image_url,\n    alt: \"检测图像\"\n  }, null, 8 /* PROPS */, _hoisted_4)) : _createCommentVNode(\"v-if\", true)]), _createCommentVNode(\" 右侧结果展示 \"), _createElementVNode(\"section\", _hoisted_5, [_cache[6] || (_cache[6] = _createElementVNode(\"h2\", null, \"检测结果\", -1 /* HOISTED */)), _createElementVNode(\"p\", null, [_cache[2] || (_cache[2] = _createElementVNode(\"strong\", null, \"类型：\", -1 /* HOISTED */)), _createTextVNode(_toDisplayString($data.latestResult.defect_type || '暂无'), 1 /* TEXT */)]), _createElementVNode(\"p\", null, [_cache[3] || (_cache[3] = _createElementVNode(\"strong\", null, \"置信度：\", -1 /* HOISTED */)), _createTextVNode(_toDisplayString($data.latestResult.confidence || '暂无'), 1 /* TEXT */)]), _createElementVNode(\"p\", null, [_cache[4] || (_cache[4] = _createElementVNode(\"strong\", null, \"位置：\", -1 /* HOISTED */)), _createTextVNode(_toDisplayString($data.latestResult.position || '暂无'), 1 /* TEXT */)]), _createElementVNode(\"p\", null, [_cache[5] || (_cache[5] = _createElementVNode(\"strong\", null, \"时间：\", -1 /* HOISTED */)), _createTextVNode(_toDisplayString($data.latestResult.timestamp || '暂无'), 1 /* TEXT */)]), _createElementVNode(\"button\", {\n    onClick: _cache[0] || (_cache[0] = (...args) => $options.fetchLatestResult && $options.fetchLatestResult(...args))\n  }, \"刷新结果\"), _createElementVNode(\"button\", {\n    onClick: _cache[1] || (_cache[1] = $event => _ctx.$router.push('/history'))\n  }, \"查看历史记录\")])])]);\n}","map":{"version":3,"names":["class","_createElementBlock","_hoisted_1","_createElementVNode","_hoisted_2","_createCommentVNode","_hoisted_3","$data","latestResult","image_url","key","src","alt","_hoisted_4","_hoisted_5","_createTextVNode","_toDisplayString","defect_type","confidence","position","timestamp","onClick","_cache","args","$options","fetchLatestResult","$event","_ctx","$router","push"],"sources":["D:\\web\\my-first-vue-app\\src\\views\\AuthPage.vue"],"sourcesContent":["<template>\r\n  <div class=\"detection-container\">\r\n    <header class=\"top-bar\">\r\n      <h1>工业异常检测平台</h1>\r\n    </header>\r\n\r\n    <main class=\"main-content\">\r\n      <!-- 左侧图像展示区域 -->\r\n      <section class=\"image-section\">\r\n        <img :src=\"latestResult.image_url\" alt=\"检测图像\" v-if=\"latestResult.image_url\" />\r\n      </section>\r\n\r\n      <!-- 右侧结果展示 -->\r\n      <section class=\"result-section\">\r\n        <h2>检测结果</h2>\r\n        <p><strong>类型：</strong>{{ latestResult.defect_type || '暂无' }}</p>\r\n        <p><strong>置信度：</strong>{{ latestResult.confidence || '暂无' }}</p>\r\n        <p><strong>位置：</strong>{{ latestResult.position || '暂无' }}</p>\r\n        <p><strong>时间：</strong>{{ latestResult.timestamp || '暂无' }}</p>\r\n\r\n        <button @click=\"fetchLatestResult\">刷新结果</button>\r\n        <button @click=\"$router.push('/history')\">查看历史记录</button>\r\n      </section>\r\n    </main>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  data() {\r\n    return {\r\n      latestResult: {\r\n        image_url: '',\r\n        defect_type: '',\r\n        confidence: '',\r\n        position: '',\r\n        timestamp: ''\r\n      }\r\n    }\r\n  },\r\n  mounted() {\r\n    this.fetchLatestResult()\r\n  },\r\n  methods: {\r\n    fetchLatestResult() {\r\n      // 假设 ECS 提供的接口为 /api/detect/latest\r\n      this.$axios.get('/api/detect/latest').then(res => {\r\n        this.latestResult = res.data\r\n      }).catch(err => {\r\n        console.error('获取检测结果失败：', err)\r\n      })\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.detection-container {\r\n  padding: 20px;\r\n  color: #fff;\r\n  background: linear-gradient(to right, #1e3c72, #2a5298);\r\n  min-height: 100vh;\r\n}\r\n\r\n.top-bar {\r\n  background: rgba(0, 0, 0, 0.3);\r\n  padding: 20px 0;\r\n  text-align: center;\r\n  font-size: 28px;\r\n  font-weight: bold;\r\n  letter-spacing: 2px;\r\n  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.5);\r\n  margin-bottom: 30px;\r\n}\r\n\r\n.main-content {\r\n  display: flex;\r\n  justify-content: space-around;\r\n  align-items: flex-start;\r\n  gap: 40px;\r\n}\r\n\r\n.image-section img {\r\n  max-width: 400px;\r\n  border-radius: 12px;\r\n  box-shadow: 0 6px 12px rgba(0, 0, 0, 0.4);\r\n}\r\n\r\n.result-section {\r\n  background: rgba(255, 255, 255, 0.1);\r\n  padding: 20px;\r\n  border-radius: 12px;\r\n  width: 350px;\r\n  backdrop-filter: blur(10px);\r\n  box-shadow: 0 6px 12px rgba(0, 0, 0, 0.4);\r\n}\r\n\r\n.result-section p {\r\n  margin: 10px 0;\r\n  font-size: 16px;\r\n}\r\n\r\n.result-section button {\r\n  margin-top: 20px;\r\n  margin-right: 10px;\r\n  padding: 10px 20px;\r\n  border: none;\r\n  border-radius: 20px;\r\n  background: #00c6ff;\r\n  background: linear-gradient(to right, #0072ff, #00c6ff);\r\n  color: white;\r\n  cursor: pointer;\r\n  transition: all 0.3s ease;\r\n}\r\n\r\n.result-section button:hover {\r\n  transform: scale(1.05);\r\n}\r\n</style>\r\n"],"mappings":";;;EACOA,KAAK,EAAC;AAAqB;;EAKxBA,KAAK,EAAC;AAAc;;EAEfA,KAAK,EAAC;AAAe;mBARpC;;EAaeA,KAAK,EAAC;AAAgB;;uBAZnCC,mBAAA,CAuBM,OAvBNC,UAuBM,G,0BAtBJC,mBAAA,CAES;IAFDH,KAAK,EAAC;EAAS,IACrBG,mBAAA,CAAiB,YAAb,UAAQ,E,sBAGdA,mBAAA,CAiBO,QAjBPC,UAiBO,GAhBLC,mBAAA,cAAiB,EACjBF,mBAAA,CAEU,WAFVG,UAEU,GAD4CC,KAAA,CAAAC,YAAY,CAACC,SAAS,I,cAA1ER,mBAAA,CAA8E;IATtFS,GAAA;IAScC,GAAG,EAAEJ,KAAA,CAAAC,YAAY,CAACC,SAAS;IAAEG,GAAG,EAAC;0BAT/CC,UAAA,KAAAR,mBAAA,e,GAYMA,mBAAA,YAAe,EACfF,mBAAA,CASU,WATVW,UASU,G,0BARRX,mBAAA,CAAa,YAAT,MAAI,sBACRA,mBAAA,CAAiE,Y,0BAA9DA,mBAAA,CAAoB,gBAAZ,KAAG,sBAftBY,gBAAA,CAAAC,gBAAA,CAekCT,KAAA,CAAAC,YAAY,CAACS,WAAW,yB,GAClDd,mBAAA,CAAiE,Y,0BAA9DA,mBAAA,CAAqB,gBAAb,MAAI,sBAhBvBY,gBAAA,CAAAC,gBAAA,CAgBmCT,KAAA,CAAAC,YAAY,CAACU,UAAU,yB,GAClDf,mBAAA,CAA8D,Y,0BAA3DA,mBAAA,CAAoB,gBAAZ,KAAG,sBAjBtBY,gBAAA,CAAAC,gBAAA,CAiBkCT,KAAA,CAAAC,YAAY,CAACW,QAAQ,yB,GAC/ChB,mBAAA,CAA+D,Y,0BAA5DA,mBAAA,CAAoB,gBAAZ,KAAG,sBAlBtBY,gBAAA,CAAAC,gBAAA,CAkBkCT,KAAA,CAAAC,YAAY,CAACY,SAAS,yB,GAEhDjB,mBAAA,CAAgD;IAAvCkB,OAAK,EAAAC,MAAA,QAAAA,MAAA,UAAAC,IAAA,KAAEC,QAAA,CAAAC,iBAAA,IAAAD,QAAA,CAAAC,iBAAA,IAAAF,IAAA,CAAiB;KAAE,MAAI,GACvCpB,mBAAA,CAAyD;IAAhDkB,OAAK,EAAAC,MAAA,QAAAA,MAAA,MAAAI,MAAA,IAAEC,IAAA,CAAAC,OAAO,CAACC,IAAI;KAAc,QAAM,E","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}